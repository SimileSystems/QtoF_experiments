/*

  QT CODE GENERATOR
  ==================
  
  GENERAL INFO:

    This code is used to generate QtUiMessage.{h, cpp}. The
    `QtUiMessage` is generated to expose the GUI events in QML. This
    means that the values that you add to `UiMessageTypes.h` can be
    used directly in your QML.  Note that we do change the names a
    little bit, as we remove the `UI_MSG_` from the #defines in
    `UiMessageTypes.h` You also have to use `QtUiMessage` as a prefix
    to access the types.
    
    Here are some examples that show how to use the corresponding
    values in `UiMessageTypes.h` in QML.
    
    UI_MSG_WINDOW_RESIZED         QtUiMessage.WINDOW_RESIZED
    UI_MSG_DIRECTORY_CREATE       QtUiMessage.DIRECTORY_CREATE
    UI_MSG_DIRECTORY_DELETE       QtUiMessage.DIRECTORY_DELETE

  USAGE: 

    When you add a new `#define` to the `UiMessageTypes.h` file, you
    have to run this CodeGenerator using node. Simply run `node
    CodeGenerator.js` from the command line. After running this code
    generator recompile you Qt project.

*/
var fs = require('fs');

/* Read the file with the ui messages. */
fs.readFile('./UiMessageTypes.h', 'utf8', function (err,data) {
  
  if (err) {
    return console.log(err);
  }

  var lines = data.split("\n");
  var msg_enum = new Array();
  
  for (var i = 0; i < lines.length; ++i) {

    var line = lines[i];
    if (line.substring(0, 15) != "#define UI_MSG_") {
      continue;
    }
    
    /* Remove UI_MSG_ */
    var define = line.split(" ")[1];
    var value = line.split(" ")[2];
    var parts = define.split("_");
    parts.splice(0, 2);

    /* Create new name, e.g. WINDOW_RESIZED, MOUSE_MOVE, etc. */
    var enum_name = parts.join("_") +" = " +value;
    msg_enum.push(enum_name);
  }

  var msg_enum_str = "enum UiMsg {\n    " +msg_enum.join(",\n    ") +"\n  };\n";

  /* Create the class for Qt. */
  var msg_class_header = ""
    +"/* Generated by " +__filename +", " +new Date() +" */\n"
    +"\n"
    +"#ifndef QT_UI_MESSAGE_H\n"
    +"#define QT_UI_MESSAGE_H\n"
    +"\n"
    +"#include <QObject>\n"
    +"\n"
    +"class QtUiMessage : public QObject {\n"
    +"  Q_OBJECT\n"
    +"\n"
    +"public:\n"
    +"  QtUiMessage();\n"
    +"\n"
    +"  " +msg_enum_str
    +"\n"
    +"  Q_ENUM(UiMsg);"
    +"\n"
    +"\n"
    +"};\n"
    +"\n"
    +"#endif\n"
    +"";

  var msg_class_source = ""
    +"#include <qtof/QtUiMessage.h>\n"
    +"\n"
    +"QtUiMessage::QtUiMessage():QObject() { } \n"
    +"";

  write_file("QtUiMessage.h", msg_class_header);
  write_file("QtUiMessage.cpp", msg_class_source);
});


function write_file(filename, source) {
  var fs = require('fs');
  fs.writeFile(filename, source, function(err) {
    if(err) {
      console.error("Failed to write " +filename +".");
      return false;
    }
    console.log(filename +" created.");
  }); 
}

